name: CI/CD Pipeline for AWS

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: your-aws-region  # e.g., us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push app image to ECR
        id: build-app
        env:
          ECR_REGISTRY: your-account-id.dkr.ecr.your-aws-region.amazonaws.com
          APP_REPOSITORY: tyldecloudserver_app
        run: |
          docker build -t $ECR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile .
          docker push $ECR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER}
          echo "$ECR_REGISTRY" > ecr_registry.txt

      - name: Build, tag, and push db image to ECR
        id: build-db
        env:
          ECR_REGISTRY: your-account-id.dkr.ecr.your-aws-region.amazonaws.com
          DB_REPOSITORY: tyldecloudserver_db
        run: |
          docker build -t $ECR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile.db .
          docker push $ECR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER}

      - name: Upload ECR Registry
        uses: actions/upload-artifact@v4
        with:
          name: ecr-registry
          path: ecr_registry.txt

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_REPOSITORY: tyldecloudserver_app
      DB_REPOSITORY: tyldecloudserver_db
      DIRECTORY: tyledecloud
      COMPOSE: compose.yml

    steps:
      - name: Download ECR Registry
        uses: actions/download-artifact@v4
        with:
          name: ecr-registry
          path: .

      - name: Read ECR Registry
        run: |
          ECR_REGISTRY=$(cat ecr_registry.txt)
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "echo 'SSH Connection Successful'"

      - name: Transfer SSL Certificate to AWS EC2
        run: |
          echo "${{ secrets.SSL_CERTIFICATE }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "cat > /etc/ssl/certs/cert.pem"
          echo "${{ secrets.SSL_PRIVATE_KEY }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "cat > /etc/ssl/private/key.pem"
          ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "chmod 600 /etc/ssl/certs/cert.pem && chmod 600 /etc/ssl/private/key.pem"

      - name: SSH Login to AWS EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_TRIGGERING_ACTOR,GITHUB_RUN_NUMBER,ECR_REGISTRY,APP_REPOSITORY,DB_REPOSITORY,DIRECTORY,COMPOSE
          script: |
            echo "Environment Variables:"
            echo "GITHUB_TRIGGERING_ACTOR: $GITHUB_TRIGGERING_ACTOR"
            echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"
            echo "ECR_REGISTRY: $ECR_REGISTRY"
            echo "APP_REPOSITORY: $APP_REPOSITORY"
            echo "DB_REPOSITORY: $DB_REPOSITORY"
            echo "DIRECTORY: $DIRECTORY"
            echo "COMPOSE: $COMPOSE"
            echo "$GITHUB_TRIGGERING_ACTOR - Deployment Initiated"
            # Validate critical environment variables
            if [[ -z "$APP_REPOSITORY" || -z "$DB_REPOSITORY" ]]; then
              echo "Error: APP_REPOSITORY or DB_REPOSITORY is not set."
              exit 1
            fi
            # Verify expanded variables
            echo "App image: ${ECR_REGISTRY}/${APP_REPOSITORY}:${GITHUB_RUN_NUMBER}"
            echo "DB image: ${ECR_REGISTRY}/${DB_REPOSITORY}:${GITHUB_RUN_NUMBER}"
            # Update docker-compose.yml with the new image versions
            cd $DIRECTORY || exit 1
            # 1. Remove invalid services (e.g., 'web') using yq
            yq eval 'del(.services.web)' -i $COMPOSE
            # 2. Update app and db images
            yq eval ".services.app.image = \"$ECR_REGISTRY/$APP_REPOSITORY:$GITHUB_RUN_NUMBER\"" -i $COMPOSE
            yq eval ".services.db.image = \"$ECR_REGISTRY/$DB_REPOSITORY:$GITHUB_RUN_NUMBER\"" -i $COMPOSE
            # 3. Replace all instances of ${GITHUB_RUN_NUMBER} (including hardcoded values)
            sed -i \
              -e "s/\${GITHUB_RUN_NUMBER}/$GITHUB_RUN_NUMBER/g" \
              -e "s/:79/:$GITHUB_RUN_NUMBER/g" \
              $COMPOSE
            # Debugging: Print the final compose.yml
            echo "DEBUG: Final compose.yml:"
            cat $COMPOSE
            # Deploy the updated services
            docker compose up --build --force-recreate -d
            # Check deployment status
            if [[ $? == 0 ]]; then
              echo